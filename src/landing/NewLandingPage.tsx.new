import React, { useState, useEffect, useRef } from 'react';
import { Link } from 'react-router-dom';
import './NewLandingPage.css';
import '../styles/VideoPosterPlaceholders.css';

const NewLandingPage: React.FC = () => {
  // State management
  const [typedText, setTypedText] = useState('');
  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0);
  const [isDeleting, setIsDeleting] = useState(false);
  const [typingSpeed, setTypingSpeed] = useState(150);
  const [activeFaq, setActiveFaq] = useState<number | null>(null);
  const [userCount, setUserCount] = useState(1583);
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [videosLoaded, setVideosLoaded] = useState<{[key: string]: boolean}>({
    hero: false,
    setup: false,
    tracing: false,
    adjusting: false
  });

  // Refs
  const heroVideoRef = useRef<HTMLVideoElement>(null);
  const setupVideoRef = useRef<HTMLVideoElement>(null);
  const tracingVideoRef = useRef<HTMLVideoElement>(null);
  const adjustingVideoRef = useRef<HTMLVideoElement>(null);
  const headerRef = useRef<HTMLElement>(null);

  // Typing animation phrases
  const phrases = [
    "Unlock Your Inner Artist...",
    "Sketch Anything, Effortlessly...",
    "Turn Photos Into Art...",
    "Master Drawing Techniques...",
    "Create Like A Pro...",
    "With TraceMate!"
  ];

  // Handle typing animation with optimized performance
  useEffect(() => {
    const currentPhrase = phrases[currentPhraseIndex];
    let timer: NodeJS.Timeout;
    
    // Use requestAnimationFrame for smoother animations
    const animateText = () => {
      if (!isDeleting && typedText === currentPhrase) {
        // Pause at the end of phrase
        setIsDeleting(false);
        setTypingSpeed(2000); // Longer pause at end of phrase
        
        if (currentPhraseIndex < phrases.length - 1) {
          timer = setTimeout(() => {
            setIsDeleting(true);
            setTypingSpeed(50);
          }, 2000);
        }
      } else if (isDeleting && typedText === '') {
        // Move to next phrase
        setIsDeleting(false);
        setCurrentPhraseIndex((current) => 
          current === phrases.length - 1 ? 0 : current + 1
        );
        setTypingSpeed(150);
      } else if (isDeleting) {
        // Delete character
        setTypedText((current) => current.substring(0, current.length - 1));
        setTypingSpeed(50);
      } else {
        // Type character
        setTypedText((current) => 
          currentPhrase.substring(0, current.length + 1)
        );
        setTypingSpeed(150);
      }
    };
    
    timer = setTimeout(animateText, typingSpeed);

    return () => clearTimeout(timer);
  }, [typedText, currentPhraseIndex, isDeleting, typingSpeed, phrases]);

  // Gradually increase user count over time
  useEffect(() => {
    const calculateIncrement = () => {
      const baseIncrement = Math.floor(Math.random() * 10) + 3;
      const shouldAddLarger = Math.random() < 0.2;
      
      if (shouldAddLarger) {
        return baseIncrement + Math.floor(Math.random() * 16) + 15;
      }
      
      return baseIncrement;
    };
    
    const checkAndUpdateCount = () => {
      const currentDate = new Date();
      const storedDateStr = localStorage.getItem('lastUserCountUpdate');
      const storedCount = localStorage.getItem('currentUserCount');
      
      if (storedCount) {
        setUserCount(parseInt(storedCount, 10));
      }
      
      if (!storedDateStr) {
        localStorage.setItem('lastUserCountUpdate', currentDate.toISOString());
        localStorage.setItem('currentUserCount', userCount.toString());
      } else {
        const storedDate = new Date(storedDateStr);
        const daysDifference = Math.floor((currentDate.getTime() - storedDate.getTime()) / (1000 * 60 * 60 * 24));
        
        if (daysDifference >= 2) {
          const increment = calculateIncrement();
          const newCount = userCount + increment;
          
          setUserCount(newCount);
          localStorage.setItem('lastUserCountUpdate', currentDate.toISOString());
          localStorage.setItem('currentUserCount', newCount.toString());
        }
      }
    };
    
    checkAndUpdateCount();
    const dailyCheck = setInterval(checkAndUpdateCount, 24 * 60 * 60 * 1000);
    
    return () => clearInterval(dailyCheck);
  }, [userCount]);

  // Toggle FAQ item
  const toggleFAQ = (index: number) => {
    setActiveFaq(activeFaq === index ? null : index);
  };

  // Handle scroll to section
  const scrollToSection = (sectionId: string) => {
    const section = document.getElementById(sectionId);
    if (section) {
      section.scrollIntoView({ behavior: "smooth" });
      section.setAttribute("tabindex", "-1");
      section.focus({ preventScroll: true });
    }
  };

  // Toggle mobile menu
  const toggleMobileMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  // Track scroll position for sticky header and scroll animations
  useEffect(() => {
    const handleScroll = () => {
      // Handle sticky header
      if (window.scrollY > 50) {
        setIsScrolled(true);
      } else {
        setIsScrolled(false);
      }
      
      // Handle scroll animations
      const animateElements = document.querySelectorAll('.animate-on-scroll');
      animateElements.forEach(element => {
        const elementTop = element.getBoundingClientRect().top;
        const triggerPoint = window.innerHeight * 0.8;
        
        if (elementTop < triggerPoint) {
          element.classList.add('animated');
        }
      });
    };

    window.addEventListener('scroll', handleScroll);
    // Trigger once on load
    setTimeout(handleScroll, 100);
    
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  // Set up Intersection Observer for optimized video loading
  useEffect(() => {
    const options = {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    };

    const handleIntersection = (entries: IntersectionObserverEntry[], observer: IntersectionObserver) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const videoWrapper = entry.target;
          const videoId = videoWrapper.getAttribute('data-video-id');
          
          if (videoId) {
            // Mark as loading
            videoWrapper.classList.add('loading');
            
            // Unobserve after initiating loading
            observer.unobserve(entry.target);
          }
        }
      });
    };
    
    const observer = new IntersectionObserver(handleIntersection, options);
    
    // Observe all video wrappers
    document.querySelectorAll('.video-wrapper').forEach(wrapper => {
      observer.observe(wrapper);
    });
    
    return () => {
      observer.disconnect();
    };
  }, []);
  
  // Handle video loading states
  useEffect(() => {
    // Update loading indicators based on video loaded state
    Object.entries(videosLoaded).forEach(([videoId, isLoaded]) => {
      const wrapper = document.querySelector(`.video-wrapper[data-video-id="${videoId}"]`);
      if (wrapper && isLoaded) {
        wrapper.classList.remove('loading');
      }
    });
  }, [videosLoaded]);

  // Handle user-initiated video play
  const handleVideoPlay = (videoId: string) => {
    const videoElement = document.querySelector(`video[data-video-id="${videoId}"]`) as HTMLVideoElement;
    const placeholder = document.querySelector(`.video-placeholder[data-video-id="${videoId}"]`);
    const wrapper = videoElement?.closest('.video-wrapper');
    
    if (videoElement && placeholder && wrapper) {
      // Show loading indicator
      wrapper.classList.add('loading');
      
      // Hide placeholder
      if (placeholder instanceof HTMLElement) {
        placeholder.style.display = 'none';
      }
      
      // Show video
      videoElement.style.display = 'block';
      
      // Load and play the video
      videoElement.load();
      videoElement.play().then(() => {
        // Remove loading indicator when video starts playing
        wrapper.classList.remove('loading');
        
        // Mark video as loaded
        setVideosLoaded(prev => ({
          ...prev,
          [videoId]: true
        }));
      }).catch(error => {
        console.error(`Error playing video ${videoId}:`, error);
        wrapper.classList.remove('loading');
      });
    }
  };

  // Current year for copyright
  const currentYear = new Date().getFullYear();

  return (
    <div className="tracemate-landing">
      {/* Navigation */}
      <header className={`header ${isScrolled ? 'scrolled' : ''}`} ref={headerRef}>
        <div className="container">
          <div className="logo">
            <img src="/assets/logo-dark-bg.png" alt="TraceMate Logo" className="logo-image" />
            <span className="logo-text" style={{
              fontFamily: 'Poppins', 
              background: 'linear-gradient(to right, #ffffff, #4a9fff)', 
              WebkitBackgroundClip: 'text', 
              WebkitTextFillColor: 'transparent'
            }}>
              TraceMate
            </span>
          </div>
          <nav className="nav">
            <ul className="nav-list">
              <li className="nav-item"><a href="#features">Features</a></li>
              <li className="nav-item"><a href="#how-it-works">How It Works</a></li>
              <li className="nav-item"><a href="#testimonials">Testimonials</a></li>
              <li className="nav-item"><a href="/login" className="nav-button">Login</a></li>
            </ul>
          </nav>
          <button className="mobile-menu-toggle" onClick={toggleMobileMenu}>
            <span className="bar"></span>
            <span className="bar"></span>
            <span className="bar"></span>
          </button>
        </div>
      </header>

      {/* Hero Section */}
      <section className="hero">
        <div className="video-container">
          <div className="video-wrapper" data-video-id="hero">
            <div className="video-placeholder" data-video-id="hero">
              <img src="/assets/hero-poster.jpg" alt="Hero video first frame" className="poster-image" />
              <div className="play-button" data-video-id="hero" onClick={() => handleVideoPlay('hero')}>
                <span className="play-icon">▶</span>
              </div>
            </div>
            <video 
              ref={heroVideoRef}
              className="hero-video"
              muted 
              loop 
              playsInline
              preload="none"
              data-video-id="hero"
              style={{ display: videosLoaded.hero ? 'block' : 'none' }}
            >
              <source src="/assets/main.mp4" type="video/mp4" />
              Your browser does not support the video tag.
            </video>
            <div className="loading-indicator" data-video-id="hero">
              <div className="spinner"></div>
            </div>
          </div>
        </div>
        
        <div className="overlay"></div>
        
        <div className="hero-content">
          <div className="logo-container">
            <img src="/assets/logo-dark-bg.png" alt="TraceMate Logo" className="hero-logo" />
          </div>
          <h1 className="hero-title">
            <span className="typing-text">{typedText}</span>
            <span className="cursor"></span>
          </h1>
          <p className="hero-subtitle">Transform your phone into a powerful drawing tool that helps you create beautiful art, even if you've never drawn before.</p>
          
          <div className="cta-container">
            <Link to="/payment" className="cta-button">Get Premium Access <span className="icon">→</span></Link>
            <div className="social-proof">✨ Join {userCount.toLocaleString()}+ Happy Artists!</div>
          </div>
        </div>
      </section>

      {/* See It In Action Section */}
      <section className="see-it-in-action" id="how-it-works">
        <div className="container">
          <h2 className="section-title animate-on-scroll">See It In Action! (It's that easy)</h2>
          
          <div className="video-demos">
            <div className="video-carousel">
              <div className="video-item animate-on-scroll">
                <div className="video-wrapper" data-video-id="setup">
                  <div className="video-placeholder" data-video-id="setup">
                    <img src="/assets/setup-poster.jpg" alt="Setup video first frame" className="poster-image" />
                    <div className="play-button" data-video-id="setup" onClick={() => handleVideoPlay('setup')}>
                      <span className="play-icon">▶</span>
                    </div>
                  </div>
                  <video 
                    ref={setupVideoRef}
                    muted 
                    loop 
                    playsInline 
                    className="demo-video"
                    preload="none"
                    data-video-id="setup"
                    style={{ display: videosLoaded.setup ? 'block' : 'none' }}
                  >
                    <source src="/assets/main.mp4" type="video/mp4" />
                    Your browser does not support the video tag.
                  </video>
                  <div className="loading-indicator" data-video-id="setup">
                    <div className="spinner"></div>
                  </div>
                </div>
                <p className="video-title">Setup & Image Choice</p>
              </div>
              
              <div className="video-item animate-on-scroll">
                <div className="video-wrapper" data-video-id="tracing">
                  <div className="video-placeholder" data-video-id="tracing">
                    <img src="/assets/tracing-poster.jpg" alt="Tracing video first frame" className="poster-image" />
                    <div className="play-button" data-video-id="tracing" onClick={() => handleVideoPlay('tracing')}>
                      <span className="play-icon">▶</span>
                    </div>
                  </div>
                  <video 
                    ref={tracingVideoRef}
                    muted 
                    loop 
                    playsInline 
                    className="demo-video"
                    preload="none"
                    data-video-id="tracing"
                    style={{ display: videosLoaded.tracing ? 'block' : 'none' }}
                  >
                    <source src="/assets/main.mp4" type="video/mp4" />
                    Your browser does not support the video tag.
                  </video>
                  <div className="loading-indicator" data-video-id="tracing">
                    <div className="spinner"></div>
                  </div>
                </div>
                <p className="video-title">The Tracing Experience</p>
              </div>
              
              <div className="video-item animate-on-scroll">
                <div className="video-wrapper" data-video-id="adjusting">
                  <div className="video-placeholder" data-video-id="adjusting">
                    <img src="/assets/adjusting-poster.jpg" alt="Adjusting video first frame" className="poster-image" />
                    <div className="play-button" data-video-id="adjusting" onClick={() => handleVideoPlay('adjusting')}>
                      <span className="play-icon">▶</span>
                    </div>
                  </div>
                  <video 
                    ref={adjustingVideoRef}
                    muted 
                    loop 
                    playsInline 
                    className="demo-video"
                    preload="none"
                    data-video-id="adjusting"
                    style={{ display: videosLoaded.adjusting ? 'block' : 'none' }}
                  >
                    <source src="/assets/main.mp4" type="video/mp4" />
                    Your browser does not support the video tag.
                  </video>
                  <div className="loading-indicator" data-video-id="adjusting">
                    <div className="spinner"></div>
                  </div>
                </div>
                <p className="video-title">Adjusting & Fine-tuning</p>
              </div>
            </div>
          </div>
          
          <div className="try-it-button-container">
            <a href="#pricing" onClick={(e) => { e.preventDefault(); scrollToSection('pricing'); }} className="try-it-button">Try It Yourself</a>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="features" id="features">
        <div className="container">
          <h2 className="section-title animate-on-scroll">Why Artists Love TraceMate</h2>
          
          <div className="features-list">
            <div className="feature-item animate-on-scroll">
              <div className="feature-icon">
                <i className="icon-easy"></i>
              </div>
              <h3 className="feature-title">Super Easy to Use</h3>
              <p className="feature-description">No complicated setup or technical knowledge required. Just open the app and start creating!</p>
            </div>
            
            <div className="feature-item animate-on-scroll">
              <div className="feature-icon">
                <i className="icon-versatile"></i>
              </div>
              <h3 className="feature-title">Works with Any Image</h3>
              <p className="feature-description">Use photos, digital art, or any reference image you can think of. The possibilities are endless!</p>
            </div>
            
            <div className="feature-item animate-on-scroll">
              <div className="feature-icon">
                <i className="icon-phone"></i>
              </div>
              <h3 className="feature-title">Just Your Phone</h3>
              <p className="feature-description">No extra equipment needed. Your smartphone is all you need to create amazing art.</p>
            </div>
            
            <div className="feature-item animate-on-scroll">
              <div className="feature-icon">
                <i className="icon-skill"></i>
              </div>
              <h3 className="feature-title">For All Skill Levels</h3>
              <p className="feature-description">Whether you're a complete beginner or experienced artist, TraceMate helps you create better art.</p>
            </div>
          </div>
        </div>
      </section>

      {/* Pricing Section */}
      <section className="pricing" id="pricing">
        <div className="container">
          <h2 className="section-title animate-on-scroll">Simple, Transparent Pricing</h2>
          
          <div className="pricing-options animate-on-scroll">
            <div className="pricing-option free">
              <div className="option-header">
                <h3>Free</h3>
                <div className="price">
                  <span className="current-price">$0</span>
                  <span className="period">forever</span>
                </div>
              </div>
              
              <ul className="features-list">
                <li>Basic tracing functionality</li>
                <li>Limited image library</li>
                <li>Standard resolution</li>
                <li>Ad-supported experience</li>
              </ul>
              
              <Link to="/login" className="pricing-button">Get Started</Link>
            </div>
            
            <div className="pricing-option premium">
              <div className="popular-tag">Most Popular</div>
              <div className="option-header">
                <h3>Lifetime Access</h3>
                <div className="price">
                  <span className="current-price">$25</span>
                  <span className="period">one-time payment</span>
                </div>
              </div>
              
              <ul className="features-list">
                <li>Full tracing capabilities</li>
                <li>Unlimited image uploads</li>
                <li>HD resolution</li>
                <li>Ad-free experience</li>
                <li>Priority support</li>
                <li>All future updates</li>
              </ul>
              
              <Link to="/payment" className="pricing-button premium">Get Lifetime Access</Link>
            </div>
          </div>
        </div>
      </section>

      {/* Testimonials Section */}
      <section className="testimonials" id="testimonials">
        <div className="container">
          <h2 className="section-title animate-on-scroll">What Our Users Say</h2>
          
          <div className="testimonials-grid">
            <div className="testimonial-card animate-on-scroll">
              <div className="testimonial-content">
                <p className="testimonial-text">"I never thought I could draw anything recognizable until I found TraceMate. Now my friends think I'm an artist!"</p>
                <div className="testimonial-author">
                  <div className="author-name">Sarah K.</div>
                  <div className="author-title">Hobbyist</div>
                </div>
              </div>
            </div>
            
            <div className="testimonial-card animate-on-scroll">
              <div className="testimonial-content">
                <p className="testimonial-text">"As an art teacher, I recommend TraceMate to all my students who struggle with proportions. It's been a game-changer."</p>
                <div className="testimonial-author">
                  <div className="author-name">Michael T.</div>
                  <div className="author-title">Art Educator</div>
                </div>
              </div>
            </div>
            
            <div className="testimonial-card animate-on-scroll">
              <div className="testimonial-content">
                <p className="testimonial-text">"The simplicity is what makes this app brilliant. No complicated setup, just instant results."</p>
                <div className="testimonial-author">
                  <div className="author-name">Emma R.</div>
                  <div className="author-title">Graphic Designer</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* FAQ Section */}
      <section className="faq" id="faq">
        <div className="container">
          <h2 className="section-title animate-on-scroll">Still on the Fence? Let's Clear Things Up!</h2>
          
          <div className="faq-container">
            {[
              {
                question: "How does the tracing actually work?",
                answer: "TraceMate cleverly uses your phone's camera and screen. You position your phone over paper, and the app projects your chosen image downwards, so you can see it on your paper and trace!"
              },
              {
                question: "Do I need any special stands or gadgets?",
                answer: "Nope! Just your phone and paper. Though some users get creative with household items like a glass cup to prop up their phone for hands-free tracing."
              },
              {
                question: "Is it really for beginners?",
                answer: "Absolutely! It's designed to be super intuitive. If you can hold a pencil, you can use TraceMate."
              }
            ].map((faq, index) => (
              <div className={`faq-item animate-on-scroll ${activeFaq === index ? 'active' : ''}`} key={index}>
                <button 
                  className={`faq-question ${activeFaq === index ? 'active' : ''}`}
                  onClick={() => toggleFAQ(index)}
                  aria-expanded={activeFaq === index}
                  aria-controls={`faq-answer-${index}`}
                >
                  {faq.question}
                  <span className="icon">{activeFaq === index ? '−' : '+'}</span>
                </button>
                <div 
                  id={`faq-answer-${index}`}
                  className={`faq-answer ${activeFaq === index ? 'active' : ''}`}
                  aria-hidden={activeFaq !== index}
                >
                  {faq.answer}
                </div>
              </div>
            ))}
          </div>
          
          <div className="final-cta animate-on-scroll">
            <h3>Ready to Amaze Yourself? Your Art Journey Starts Now!</h3>
            <Link to="/payment" className="cta-button">Get Lifetime Access for $25! <span className="icon">→</span></Link>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="footer">
        <div className="container">
          <div className="footer-content">
            <div className="footer-logo">
              <img src="/assets/logo-dark-bg.png" alt="TraceMate" className="logo-image" />
              <span className="logo-text" style={{
                fontFamily: 'Poppins', 
                background: 'linear-gradient(to right, #ffffff, #4a9fff)', 
                WebkitBackgroundClip: 'text', 
                WebkitTextFillColor: 'transparent'
              }}>
                TraceMate
              </span>
            </div>
            
            <div className="footer-links">
              <div className="footer-links-column">
                <h4>Quick Links</h4>
                <ul>
                  <li><button onClick={() => scrollToSection('how-it-works')}>How It Works</button></li>
                  <li><button onClick={() => scrollToSection('pricing')}>Pricing</button></li>
                  <li><button onClick={() => scrollToSection('faq')}>FAQ</button></li>
                </ul>
              </div>
              
              <div className="footer-links-column">
                <h4>Legal</h4>
                <ul>
                  <li><Link to="/privacy">Privacy Policy</Link></li>
                  <li><Link to="/terms">Terms of Service</Link></li>
                </ul>
              </div>
              
              <div className="footer-links-column">
                <h4>Account</h4>
                <ul>
                  <li><Link to="/login">Sign In</Link></li>
                  <li><Link to="/payment">Get Premium</Link></li>
                </ul>
              </div>
            </div>
          </div>
          
          <div className="copyright">
            © {currentYear} TraceMate. All Rights Reserved.
          </div>
        </div>
      </footer>
    </div>
  );
};

export default NewLandingPage;
