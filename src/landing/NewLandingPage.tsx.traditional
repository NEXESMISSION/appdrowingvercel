import React, { useState, useRef, useEffect } from 'react';
import { Link } from 'react-router-dom';
import './NewLandingPage.css';
import '../styles/VideoPosterPlaceholders.css';

const NewLandingPage: React.FC = () => {
  // State management
  const [activeFaq, setActiveFaq] = useState<number | null>(null);
  const [isScrolled, setIsScrolled] = useState(false);
  const [activeTestimonial, setActiveTestimonial] = useState(0);
  
  // Refs
  const headerRef = useRef<HTMLElement>(null);
  const videoRef = useRef<HTMLVideoElement>(null);

  // Example testimonial data
  const testimonials = [
    { 
      text: "TraceMate has revolutionized how I analyze network traffic patterns. What used to take hours now takes minutes.",
      name: "Sarah Johnson",
      role: "Network Security Analyst" 
    },
    { 
      text: "The pattern recognition capabilities are unmatched. I've discovered insights that would have been impossible to find manually.",
      name: "Michael Chen",
      role: "Data Scientist" 
    },
    { 
      text: "Worth every penny! The one-time payment model is refreshing in a world of endless subscriptions.",
      name: "Alex Rodriguez",
      role: "Software Developer" 
    }
  ];
  
  // Example FAQ data
  const faqItems = [
    { 
      question: "What is TraceMate?", 
      answer: "TraceMate is a powerful application that helps you trace and analyze data patterns efficiently, providing insights that would be difficult to spot manually." 
    },
    { 
      question: "How much does TraceMate cost?", 
      answer: "TraceMate offers a free plan with limited capabilities and a premium plan for $25 (one-time payment) that unlocks all features forever." 
    },
    { 
      question: "Do you offer refunds?", 
      answer: "Yes, we offer a 30-day money-back guarantee. If you're not satisfied with TraceMate Premium, we'll issue a full refund." 
    },
    { 
      question: "How do I get started?", 
      answer: "You can start using TraceMate today by clicking the 'Try It Now' button. No credit card required for the free plan." 
    }
  ];
  
  // Toggle FAQ item
  const toggleFAQ = (index: number) => {
    setActiveFaq(activeFaq === index ? null : index);
  };

  // Handle scroll events for header
  useEffect(() => {
    const handleScroll = () => {
      // Update header style based on scroll position
      if (window.scrollY > 50) {
        setIsScrolled(true);
      } else {
        setIsScrolled(false);
      }
    };
    
    window.addEventListener('scroll', handleScroll);
    handleScroll(); // Initial check
    
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Auto-play hero video on load
  useEffect(() => {
    if (videoRef.current) {
      videoRef.current.play().catch(err => {
        console.log('Auto-play prevented:', err);
      });
    }
  }, []);
  
  // Handle testimonial navigation
  const nextTestimonial = () => {
    setActiveTestimonial((prev) => (prev + 1) % testimonials.length);
  };
  
  const prevTestimonial = () => {
    setActiveTestimonial((prev) => (prev - 1 + testimonials.length) % testimonials.length);
  };
  
  // Get current year for footer
  const currentYear = new Date().getFullYear();

  return (
    <div className="landing-page">
      {/* Header with logo and sign-in button */}
      <header 
        ref={headerRef}
        className={`header ${isScrolled ? 'scrolled' : ''}`}
      >
        <div className="header-container">
          {/* Logo */}
          <div className="logo-container">
            <img src="/assets/logo-dark-bg.png" alt="TraceMate" className="logo-image" />
            <span className="logo-text">TraceMate</span>
          </div>
          
          {/* Sign In Button */}
          <div>
            <Link to="/login" className="sign-in-button">
              Sign In
            </Link>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="hero-section">
        <div className="hero-overlay"></div>
        <div className="hero-content">
          <div className="hero-logo-container">
            <div className="hero-logo-circle">
              <span className="hero-logo-text">TM</span>
            </div>
            <h3 className="logo-text">TraceMate</h3>
          </div>
          <h1 className="hero-title">
            Your Ultimate Tracing Companion
          </h1>
          <p className="hero-subtitle">
            Trace, analyze, and understand data patterns with unprecedented ease. 
            Unlock insights that would be impossible to spot manually.
          </p>
          <button className="hero-button">
            Try It Now
          </button>
        </div>
        <div className="hero-video-container">
          <div className="hero-video-gradient"></div>
          <div className="hero-video-wrapper">
            <video 
              ref={videoRef}
              className="hero-video"
              muted
              loop
              playsInline
              poster="/assets/video-poster.jpg"
            >
              <source src="/assets/main.mp4" type="video/mp4" />
            </video>
          </div>
        </div>
      </section>

      {/* How It Works Section */}
      <section className="how-it-works-section" id="how-it-works">
        <div className="how-it-works-container">
          <div className="section-header">
            <h2 className="section-title">How It Works</h2>
            <p className="section-subtitle">
              Getting started with TraceMate is simple.
            </p>
          </div>
          
          {/* Mobile: Horizontal scrolling container */}
          <div className="mobile-video-carousel">
            <div className="mobile-video-container">
              {[1, 2, 3].map((number) => (
                <div key={number} className="mobile-video-card">
                  <div className="mobile-video-thumbnail">
                    <img src="/api/placeholder/270/480" alt={`Video ${number}`} />
                    <div className="video-overlay">
                      <div className="play-button">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <circle cx="12" cy="12" r="10"></circle>
                          <polygon points="10 8 16 12 10 16 10 8"></polygon>
                        </svg>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            <div className="mobile-video-dots">
              {[1, 2, 3].map((_, i) => (
                <div key={i} className="mobile-video-dot" />
              ))}
            </div>
          </div>
          
          {/* Desktop: Centered TikTok videos side by side */}
          <div className="video-grid">
            {[1, 2, 3].map((number) => (
              <div key={number} className="video-card">
                <div className="video-thumbnail">
                  <img src="/api/placeholder/360/640" alt={`Video ${number}`} />
                  <div className="video-overlay">
                    <div className="play-button">
                      <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <circle cx="12" cy="12" r="10"></circle>
                        <polygon points="10 8 16 12 10 16 10 8"></polygon>
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Testimonials Section */}
      <section className="testimonials-section">
        <div className="testimonials-container">
          <div className="section-header">
            <h2 className="section-title">What Our Users Say</h2>
            <p className="section-subtitle">
              Don't just take our word for it. Here's what our users have to say about TraceMate.
            </p>
          </div>
          <div className="testimonial-carousel">
            <div className="testimonial-slider">
              <div className="testimonial-slide">
                <div className="testimonial-card">
                  <p className="testimonial-text">{testimonials[activeTestimonial].text}</p>
                  <div>
                    <p className="testimonial-author">{testimonials[activeTestimonial].name}</p>
                    <p className="testimonial-role">{testimonials[activeTestimonial].role}</p>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="testimonial-controls">
              <button 
                className="testimonial-button"
                onClick={prevTestimonial}
                aria-label="Previous testimonial"
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <polyline points="15 18 9 12 15 6"></polyline>
                </svg>
              </button>
              
              <div className="testimonial-dots">
                {testimonials.map((_, i) => (
                  <button
                    key={i}
                    className={`testimonial-dot ${i === activeTestimonial ? 'active' : ''}`}
                    onClick={() => setActiveTestimonial(i)}
                    aria-label={`Go to testimonial ${i + 1}`}
                  />
                ))}
              </div>
              
              <button 
                className="testimonial-button"
                onClick={nextTestimonial}
                aria-label="Next testimonial"
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <polyline points="9 18 15 12 9 6"></polyline>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </section>

      {/* Pricing Section */}
      <section className="pricing-section" id="pricing">
        <div className="pricing-container">
          <div className="section-header">
            <h2 className="section-title">Simple Pricing</h2>
            <p className="section-subtitle">
              Choose the plan that's right for you. No hidden fees, no surprises.
            </p>
          </div>
          
          {/* Pricing grid */}
          <div className="pricing-grid">
            {/* Free Plan */}
            <div className="pricing-card">
              <div className="pricing-header">
                <h3 className="pricing-title">Free Plan</h3>
                <div className="pricing-price">
                  <span className="pricing-currency">$</span>
                  <span className="pricing-amount">0</span>
                </div>
                <p className="pricing-period"></p>
              </div>
              <div className="pricing-feature">
                <div className="feature-icon">
                  <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <polyline points="20 6 9 17 4 12"></polyline>
                  </svg>
                </div>
                <p className="feature-text">Limited time in every tracing session</p>
              </div>
              <div className="pricing-actions">
                <Link to="/app" className="pricing-button primary">
                  Try
                </Link>
                <Link to="/login" className="pricing-button secondary">
                  Start
                </Link>
              </div>
            </div>
            
            {/* Premium Plan */}
            <div className="pricing-card popular">
              <div className="popular-badge">Most Popular</div>
              <div className="pricing-header">
                <h3 className="pricing-title">Premium Plan</h3>
                <div className="pricing-price">
                  <span className="pricing-currency">$</span>
                  <span className="pricing-amount">25</span>
                </div>
                <p className="pricing-period">one-time payment</p>
              </div>
              <div className="pricing-feature">
                <div className="feature-icon">
                  <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <polyline points="20 6 9 17 4 12"></polyline>
                  </svg>
                </div>
                <p className="feature-text">Full tracing capabilities forever, no limits</p>
              </div>
              <div className="pricing-actions">
                <Link to="/payment" className="pricing-button primary">
                  Buy
                </Link>
                <Link to="/app" className="pricing-button secondary">
                  Try
                </Link>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* FAQ Section */}
      <section className="faq-section">
        <div className="faq-container">
          <div className="section-header">
            <h2 className="section-title">Frequently Asked Questions</h2>
            <p className="section-subtitle">
              Got questions? We've got answers.
            </p>
          </div>
          <div>
            {faqItems.map((item, index) => (
              <div key={index} className="faq-item">
                <button 
                  className="faq-question"
                  onClick={() => toggleFAQ(index)}
                >
                  <span>{item.question}</span>
                  <div className="faq-icon">
                    {activeFaq === index ? (
                      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <line x1="5" y1="12" x2="19" y2="12"></line>
                      </svg>
                    ) : (
                      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <line x1="12" y1="5" x2="12" y2="19"></line>
                        <line x1="5" y1="12" x2="19" y2="12"></line>
                      </svg>
                    )}
                  </div>
                </button>
                <div className={`faq-answer ${activeFaq === index ? 'active' : ''}`}>
                  {item.answer}
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="footer">
        <div className="footer-container">
          <div className="footer-content">
            <div className="footer-logo">
              <div className="footer-logo-circle">
                <span className="hero-logo-text">TM</span>
              </div>
              <span className="footer-logo-text">TraceMate</span>
            </div>
            <div className="footer-copyright">
              © {currentYear} TraceMate. All rights reserved.
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default NewLandingPage;
