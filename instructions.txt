Project Report: TraceMate - Camera Tracing Web Application
1. Project Overview
TraceMate is a simple, modern web application designed to assist users in tracing images onto physical surfaces (like paper). It achieves this by allowing users to upload an image, which is then displayed as a semi-transparent overlay on top of their device's live camera feed. Users can then position their physical drawing surface under the camera and trace the overlaid image.
2. Target Audience
Artists (beginners and experienced) looking for a tool to transfer sketches or reference images.
Hobbyists and crafters.
Students learning to draw or replicate diagrams.
3. Core Features
Image Upload: Users can upload an image file (e.g., JPG, PNG, SVG) from their device.
Live Camera Feed: Accesses the device's camera(s).
Image Overlay: Displays the uploaded image semi-transparently over the live camera feed.
Overlay Adjustments: Provides controls to manipulate the overlay image:
Opacity: Slider to control the transparency of the overlay.
Scale: Slider/control to resize the overlay image.
Position: Controls (e.g., drag or X/Y sliders) to move the overlay image horizontally and vertically.
Rotation/Tilt: Controls (e.g., slider or gesture) to rotate the overlay image.
Camera Selection: Allows users to switch between available device cameras (e.g., front, back, wide-angle).
Full Screen Mode: Allows the tracing interface to occupy the entire screen for an immersive experience.
Paper Alignment Guides: Displays two static visual markers on the camera feed (near top-left and bottom-left, but not in the absolute corners) to help users realign their physical paper if it moves.
Responsive UI: Adapts layout for different screen sizes (phones, tablets, desktops).
4. User Flow
Landing/Upload Page:
User visits the TraceMate web app URL.
User sees a clean page with a prominent "Upload Image" button.
User clicks the button.
A file selection dialog appears.
User selects an image file and confirms.
Transition:
Upon successful image selection, the app automatically requests camera permissions (if not already granted).
The app navigates to the Live Tracing Page.
Live Tracing Page:
User sees the live feed from their selected camera.
The uploaded image is displayed as an overlay on the camera feed.
The two paper alignment guide points are visible on the camera feed area.
Controls (Full Screen, Close, Adjustments) are visible.
User positions their device and physical paper.
User interacts with the Adjustments panel (opens it if hidden) to:
Change overlay opacity, scale, position, rotation.
Switch cameras if needed (via the menu within the adjustments panel).
User uses the alignment guides to reposition paper if it shifts.
User traces the overlay image onto their physical paper while viewing the screen.
User can toggle Full Screen mode.
User clicks the Close button to return to the Upload Page (state might be reset or user prompted).
User can toggle the visibility of the Adjustments panel.
5. Technical Specifications
Platform: Web Application
Frontend Framework: React
Language: TypeScript
Key Web APIs:
getUserMedia (MediaDevices API) for camera access.
File API for image uploads.
Canvas API (potentially) or CSS Transforms for manipulating the overlay image (position, scale, rotation, opacity).
Fullscreen API for full-screen mode.
enumerateDevices (MediaDevices API) for listing available cameras.
6. UI/UX Guidelines
Overall Aesthetic: Very Modern, Very Clean. Minimalist design principles.
Simplicity: The user experience should be intuitive and straightforward. Avoid clutter.
Upload Page: Extremely simple. Focus solely on the upload action.
Tracing Page Layout:
The camera feed should be the primary element, taking up most of the screen space.
The overlay image should be clearly distinguishable but adjustable via opacity.
Controls (Close, Full Screen, Adjustments Toggle) should be easily accessible but unobtrusive (e.g., icons in corners or along an edge).
Adjustments Panel:
Phone/Portrait: Positioned below the camera view to avoid covering it during interaction.
Tablet/Desktop/Wider Screens: Positioned on the side (e.g., right or left) of the camera view.
Behavior: Toggable visibility. A single button (e.g., settings icon) shows the panel on the first click and hides it on the second click.
Content: Sliders for Opacity, Scale, Position (X/Y), Rotation. Below these sliders, include a dropdown or list to select the active camera source.
Paper Alignment Guides:
Two simple, non-intrusive visual markers (e.g., small circles or crosses).
Position: One near the top-left, one near the bottom-left. Crucially, add padding - do not place them in the absolute corners (e.g., inset by 20-30px from the top/left and bottom/left edges of the camera view area).
Purpose: Purely visual reference for the user. Not interactive.
Responsiveness: The application must adapt fluidly to different screen sizes and orientations.
7. Key Components (for Development)
UploadPage: Handles file input and navigation.
TracingPage: Main component containing camera view, overlay, and controls.
CameraView: Component responsible for accessing and displaying the camera stream.
ImageOverlay: Component responsible for rendering and manipulating the uploaded image based on adjustment values.
AdjustmentPanel: Component containing sliders, camera selector, and handling panel visibility/layout logic.
AlignmentGuides: Simple component/elements displaying the static reference points.
ControlBar: Component holding buttons like Close, Full Screen, Adjustments Toggle.
8. Deliverables
A functional TraceMate web application meeting all specified requirements.
Source code (React/TypeScript) hosted in a repository (e.g., Git).
Basic documentation on how to run the application locally.